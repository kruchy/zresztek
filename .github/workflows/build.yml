name: Build, Test and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'

jobs:
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Path filtering
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  build_and_test:
    needs: path-filter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [backend, frontend]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18

    - name: Install dependencies
      if: needs.path-filter.outputs[matrix.app] == 'true'
      run: |
        cd ${{ matrix.app }}
        npm ci

    - name: Run tests
      if: needs.path-filter.outputs[matrix.app] == 'true'
      run: |
        cd ${{ matrix.app }}
        npm test

  build_and_push_docker_images_backend:
    needs: [path-filter, build_and_test]
    runs-on: ubuntu-latest
    if: needs.path-filter.outputs.backend == 'true'

    env:
      BACKEND_CONSTANT_INGREDIENTS: ${{ secrets.CONSTANT_INGREDIENTS }}
      BACKEND_SINGLE_VARYING_INGREDIENTS: ${{ secrets.SINGLE_VARYING_INGREDIENTS }}
      BACKEND_SINGLE_RECIPE_PROMPT: ${{ secrets.SINGLE_RECIPE_PROMPT }}
      BACKEND_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      BACKEND_PORT: ${{ vars.PORT }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker Image - Backend
      uses: docker/build-push-action@v4
      id: docker_build_backend
      with:
        file: backend/Dockerfile
        context: ./backend
        push: true
        builder: ${{ steps.buildx.outputs.name }}
        build-args: |
          CONSTANT_INGREDIENTS: ${{ secrets.CONSTANT_INGREDIENTS }}
          SINGLE_VARYING_INGREDIENTS: ${{ secrets.SINGLE_VARYING_INGREDIENTS }}
          SINGLE_RECIPE_PROMPT: ${{ secrets.SINGLE_RECIPE_PROMPT }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PORT: ${{ vars.PORT }}
        tags: |
          ghcr.io/${{ github.repository_owner }}/zresztek-backend:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/zresztek-backend:latest
   
  build_and_push_docker_images_frontend:
    needs: [path-filter, build_and_test]
    runs-on: ubuntu-latest
    if: needs.path-filter.outputs.frontend == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker Image - Frontend
      uses: docker/build-push-action@v2
      id: docker_build_frontend
      if: needs.path-filter.outputs['frontend'] == 'true'
      with:
        file: frontend/Dockerfile
        context: ./frontend
        push: true
        builder: ${{ steps.buildx.outputs.name }}
        tags: |
          ghcr.io/${{ github.repository_owner }}/zresztek-frontend:${{ github.sha }}   
          ghcr.io/${{ github.repository_owner }}/zresztek-frontend:latest
